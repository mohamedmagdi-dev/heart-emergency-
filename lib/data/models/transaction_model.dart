// Transaction model for wallet transactions
import 'package:cloud_firestore/cloud_firestore.dart';
import 'user_model.dart';

enum TransactionStatus { success, failed, pending }

extension TransactionStatusExtension on TransactionStatus {
  String get name {
    switch (this) {
      case TransactionStatus.success:
        return 'success';
      case TransactionStatus.failed:
        return 'failed';
      case TransactionStatus.pending:
        return 'pending';
    }
  }

  static TransactionStatus fromString(String value) {
    switch (value) {
      case 'success':
        return TransactionStatus.success;
      case 'failed':
        return TransactionStatus.failed;
      case 'pending':
        return TransactionStatus.pending;
      default:
        return TransactionStatus.pending;
    }
  }
}

class TransactionModel {
  final String? id; // Auto-generated by Firestore
  final String fromUserId; // Reference to users collection
  final String toUserId; // Reference to users collection
  final double amount;
  final Currency currency;
  final double commission; // Auto 12%
  final TransactionStatus status;
  final DateTime createdAt;

  TransactionModel({
    this.id,
    required this.fromUserId,
    required this.toUserId,
    required this.amount,
    required this.currency,
    required this.commission,
    required this.status,
    required this.createdAt,
  });

  factory TransactionModel.fromMap(Map<String, dynamic> map, {String? documentId}) {
    return TransactionModel(
      id: documentId ?? map['id'],
      fromUserId: map['fromUserId'] ?? '',
      toUserId: map['toUserId'] ?? '',
      amount: (map['amount'] ?? 0).toDouble(),
      currency: CurrencyExtension.fromString(map['currency'] ?? 'EGP'),
      commission: (map['commission'] ?? 0).toDouble(),
      status: TransactionStatusExtension.fromString(map['status'] ?? 'pending'),
      createdAt: (map['createdAt'] as Timestamp?)?.toDate() ?? DateTime.now(),
    );
  }

  Map<String, dynamic> toMap() {
    return {
      if (id != null) 'id': id,
      'fromUserId': fromUserId,
      'toUserId': toUserId,
      'amount': amount,
      'currency': currency.name,
      'commission': commission,
      'status': status.name,
      'createdAt': Timestamp.fromDate(createdAt),
    };
  }

  TransactionModel copyWith({
    String? id,
    String? fromUserId,
    String? toUserId,
    double? amount,
    Currency? currency,
    double? commission,
    TransactionStatus? status,
    DateTime? createdAt,
  }) {
    return TransactionModel(
      id: id ?? this.id,
      fromUserId: fromUserId ?? this.fromUserId,
      toUserId: toUserId ?? this.toUserId,
      amount: amount ?? this.amount,
      currency: currency ?? this.currency,
      commission: commission ?? this.commission,
      status: status ?? this.status,
      createdAt: createdAt ?? this.createdAt,
    );
  }

  // Calculate net amount after commission
  double get netAmount => amount - commission;

  // Calculate commission (12% by default)
  static double calculateCommission(double amount) => amount * 0.12;
}